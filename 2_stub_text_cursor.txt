I'm creating a Rust project and I need your help. 
I'm going to give you a description of the project and 
some drawings, and I'd like you to help me turn it into a real 
life rust project. 

Project Details:

AI Chat Bot Application for Customer Support

I want to create a chat bot for my Health Tech Startup company. 
I want this chat bot to be able to read through data and/or websites 
and answer any questions that a customer may have about our application. 
This application will utilize Rust on the backend and React on the 
frontend with Actix Web Framework and the use of Websockets for real 
time connections. The response to the user should be streams and updated 
in real time. The answers will generally be no longer than 3 - 5 sentences 
and either suggested links to read more info, or links directly where 
the answer was found. 

We have our help docs for customers stored on an external website that 
we can access through an API by passing back a query string. 

This project is mostly to get an MVP to demo and to learn how to 
build an application like this.

It should be able to handle concurrent requests well. 

If the question the User asks is very long, the application should 
send the question to the model and parse out just a few key words 
that we can pul out and send in our query string to the API. 


If the question is unrelated to Healthie or Clinical Care related items, 
or no documents were found in the API Search,

The model application should return a response to ask the user 
again for a more concise search.


Instructions: 

You are a professional software developer who is very friendly and supportive.

You are now entering Phase 2 of the app development process. 
Your task is to create a stubbed-out project structure based 
on the @masterplan.md file and the code stubs at the end of this 
message. 

Begin by reviewing the masterplan.md file and any provided drawings 
or wireframes. Familiarize yourself with the app's overall structure, 
main features, and architectural decisions.

Create a high-level project structure with appropriate directories. 
This should reflect the app's architecture (e.g., frontend, backend, database) 
and main features.

For each major component or feature identified in the masterplan, 
create stub files with minimal, essential information. Include:
a. A brief comment at the top of each file describing its purpose
b. Add a comment with the full filepath to the stub file. 
   This prevents named conflicts when you create files with the same name 
   in different directories.
c. Placeholder import statements for likely dependencies
d. Empty function or class declarations for key functionalities
e. TODO comments indicating where major logic will be implemented

In the stub files, do not include detailed implementations or actual code logic. 
The goal is to create a skeleton that can be easily expanded in Phase 3.

For the frontend (if applicable):
a. Create basic component files with empty component declarations
b. Stub out main pages or views
c. Include placeholder routing information

For the backend (if applicable):
a. Create stub files for main API endpoints or services
b. Include empty model definitions based on the data structure outlined in the masterplan
c. Stub out database connection file (if needed)

Create a basic README.md file with:
a. Project title and brief description
b. Placeholder sections for setup instructions, main features, and technology stack

If the app requires any configuration files (e.g., package.json, .gitignore), 
create these with minimal required information.

After creating the stubbed-out project structure, provide a summary of the created 
files and directories, explaining the purpose of each major component.

Ask the user if they would like to see the content of any specific stubbed files, 
and be prepared to show and explain them.

Remind the user that this is a minimal structure and that full implementation 
will occur in Phase 3.

Remember:

Keep all stubs minimal. Include just enough information to understand 
the file's purpose and its place in the overall structure.

Do not implement any actual logic or detailed code.

Use consistent naming conventions throughout the project structure.

If you're unsure about a specific structure or file, refer back to the masterplan 
or ask the user for clarification.


ai-chatbot/
├── README.md
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── ChatInterface.tsx
│   │   │   └── Message.tsx
│   │   ├── pages/
│   │   │   └── ChatPage.tsx
│   │   ├── services/
│   │   │   └── websocket.ts
│   │   └── App.tsx
│   ├── package.json
│   └── tsconfig.json
├── backend/
│   ├── src/
│   │   ├── main.rs
│   │   ├── routes/
│   │   │   └── chat.rs
│   │   ├── models/
│   │   │   └── message.rs
│   │   ├── services/
│   │   │   ├── ai_model.rs
│   │   │   └── api_integration.rs
│   │   └── db/
│   │       └── connection.rs
│   ├── Cargo.toml
│   └── .env
└── .gitignore


README.md
# AI Chat Bot Application

This AI Chat Bot application provides efficient customer support for a Health Tech Startup. It uses the Llama 3.1 7B model to generate responses based on external API data.

## Setup Instructions

TODO: Add setup instructions

## Main Features

- Real-time chat interface
- AI-powered response generation
- Integration with external help documentation API
- Streaming responses

## Technology Stack

- Frontend: React with TypeScript
- Backend: Rust with Actix Web Framework
- Database: Postgres
- AI Model: Llama 3.1 7B


```typescript
// File: frontend/src/components/ChatInterface.tsx

import React from 'react';
import Message from './Message';

// TODO: Import WebSocket service

const ChatInterface: React.FC = () => {
  // TODO: Implement chat interface logic
  return (
    <div>
      {/* TODO: Implement chat interface UI */}
    </div>
  );
};

export default ChatInterface;
```

```rust
// File: backend/src/main.rs

use actix_web::{App, HttpServer};

mod routes;
mod models;
mod services;
mod db;

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    // TODO: Initialize database connection
    // TODO: Set up Actix web server
    // TODO: Configure WebSocket
    // TODO: Set up routes
    
    println!("Server running at http://localhost:8080");
    HttpServer::new(|| {
        App::new()
            // TODO: Add service configurations and routes
    })
    .bind(("127.0.0.1", 8080))?
    .run()
    .await
}
```

```rust
// File: backend/src/services/ai_model.rs

// TODO: Import necessary dependencies for Llama 3.1 7B model

pub struct AIModel {
    // TODO: Add fields for AI model configuration
}

impl AIModel {
    pub fn new() -> Self {
        // TODO: Initialize AI model
        Self {}
    }

    pub async fn generate_response(&self, query: &str) -> String {
        // TODO: Implement AI response generation
        String::from("AI response placeholder")
    }
}
```

```typescript
// File: frontend/src/services/websocket.ts

class WebSocketService {
  private socket: WebSocket | null = null;

  connect(url: string): void {
    // TODO: Implement WebSocket connection
  }

  sendMessage(message: string): void {
    // TODO: Implement sending message via WebSocket
  }

  onMessage(callback: (message: string) => void): void {
    // TODO: Implement message receiving logic
  }

  disconnect(): void {
    // TODO: Implement WebSocket disconnection
  }
}

export default new WebSocketService();
```